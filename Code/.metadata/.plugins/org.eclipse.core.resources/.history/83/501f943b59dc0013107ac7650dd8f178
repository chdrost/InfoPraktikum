/*
 * Graph.cpp
 *
 *  Created on: 13.05.2014
 *      Author: deniz
 */

#include "Graph.h"

Graph::Graph(map<int, Gebietslokation*> rohDaten) {
	map<int, Knoten*> konstruktionsMap;
	erstelleKnoten(konstruktionsMap, rohDaten);
	verlinkeKnoten(konstruktionsMap, rohDaten);
	//TODO Pruefen, ob hier Destruktoren aufgerufen werden

	//cout<<"\n\n\n\n\n\n\n\nGroesse k MAp: "<<konstruktionsMap.size()<"\n\n\n\n\n\n\n\n";
	konstruktionsMap.clear();
}

Graph::~Graph() {
	for (auto it = knotenListe.begin(); it != knotenListe.end(); it++) {
		delete *it;
	}
	knotenListe.clear();
}

void Graph::erstelleKnoten(map<int, Knoten*>& konstruktionsMap,
		const map<int, Gebietslokation*>& rohdaten) {
	//Alle Elemente durchlaufen
	for (auto it = rohdaten.begin(); it != rohdaten.end(); it++) {
		//Pruefen, ob Element eine Punklokation ist
		Punktlokation *pktLok = (Punktlokation*) it->second;
		if (pktLok->getType() == PUNKT) {
			try {
				//Pruefen, ob der Intersection Code des Elements existiert
				//Wenn nicht wird eine Out Of Range Exception ausgeloest.
				//In dem Fall kann ein neuer Knoten erstellt werden.
				konstruktionsMap.at(pktLok->getIntersectioncode()->getId());
			} catch (const out_of_range& oor) {
				Knoten *k = new Knoten(pktLok);
				knotenListe.push_back(k);
				konstruktionsMap[k->getEigenschaften()->getId()] = k;
			}
		}
	}
}

void Graph::verlinkeKnoten(map<int, Knoten*> konstruktionsMap,
		const map<int, Gebietslokation*> &rohdaten) {
	for (list<Knoten*>::iterator it = knotenListe.begin();
			it != knotenListe.end(); it++) {
		Knoten *knoten = *it;
		Punktlokation *pLok = knoten->getEigenschaften();
		//POffset als Nachfolger eintragen
		if (pLok->getPositiveOffset() != NULL) {
			knoten->addNachfolger(konstruktionsMap[pLok->getId()]);
		}
		//NOffset als Nachfolger eintragen
		if (pLok->getNegativeOffset() != NULL) {
			knoten->addNachfolger(konstruktionsMap[pLok->getId()]);
		}
		//Die Offsets des Intersection Codes eintragen
		if (knoten->getEigenschaften()->getIntersectioncode() != NULL) {
			if (knoten->getEigenschaften()->getIntersectioncode()->getPositiveOffset() != NULL) {
				knoten->addNachfolger(
						konstruktionsMap[(knoten->getEigenschaften()->getIntersectioncode()->getPositiveOffset()->getId())]);
			}
			if (knoten->getEigenschaften()->getIntersectioncode()->getNegativeOffset() != NULL) {
				knoten->addNachfolger(
						konstruktionsMap[(knoten->getEigenschaften()->getIntersectioncode()->getNegativeOffset()->getId())]);
			}
		}

	}

}

string Graph::toString() {
	ostringstream s;
	s << "\nAusgabe des Graphen: \n";
	for (auto it = knotenListe.begin(); it != knotenListe.end(); it++) {
		s << ((Knoten*) *it)->toString();
	}
	s << "\nEnde Graph\n";
	return (s.str());
}
